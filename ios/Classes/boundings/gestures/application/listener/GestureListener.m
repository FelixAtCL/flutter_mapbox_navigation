// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "GestureListener.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface FLT_GESTURESScreenCoordinate ()
+ (FLT_GESTURESScreenCoordinate *)fromList:(NSArray *)list;
+ (nullable FLT_GESTURESScreenCoordinate *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation FLT_GESTURESScreenCoordinate
+ (instancetype)makeWithX:(NSNumber *)x
    y:(NSNumber *)y {
  FLT_GESTURESScreenCoordinate* pigeonResult = [[FLT_GESTURESScreenCoordinate alloc] init];
  pigeonResult.x = x;
  pigeonResult.y = y;
  return pigeonResult;
}
+ (FLT_GESTURESScreenCoordinate *)fromList:(NSArray *)list {
  FLT_GESTURESScreenCoordinate *pigeonResult = [[FLT_GESTURESScreenCoordinate alloc] init];
  pigeonResult.x = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.x != nil, @"");
  pigeonResult.y = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.y != nil, @"");
  return pigeonResult;
}
+ (nullable FLT_GESTURESScreenCoordinate *)nullableFromList:(NSArray *)list {
  return (list) ? [FLT_GESTURESScreenCoordinate fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.x ?: [NSNull null]),
    (self.y ?: [NSNull null]),
  ];
}
@end

@interface FLT_GESTURESGestureListenerCodecReader : FlutterStandardReader
@end
@implementation FLT_GESTURESGestureListenerCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [FLT_GESTURESScreenCoordinate fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface FLT_GESTURESGestureListenerCodecWriter : FlutterStandardWriter
@end
@implementation FLT_GESTURESGestureListenerCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[FLT_GESTURESScreenCoordinate class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface FLT_GESTURESGestureListenerCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLT_GESTURESGestureListenerCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLT_GESTURESGestureListenerCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLT_GESTURESGestureListenerCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMethodCodec> *FLT_GESTURESGestureListenerGetCodec(void) {
  static FlutterStandardMethodCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    FLT_GESTURESGestureListenerCodecReaderWriter *readerWriter = [[FLT_GESTURESGestureListenerCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMethodCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

